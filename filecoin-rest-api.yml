openapi: 3.0.2
tags:
  - name: Actors
  - name: Node
  - name: blocks
  - name: messages
  - name: tipsets
    description: Operations on tipsets
x-tagGroups:
  - name: Chain Resources
    tags:
      - tipsets
      - blocks
      - messages
  - name: Actors
    tags:
      - Actors
      - Channels
  - name: Control
    tags:
      - Node
      - Address
      - Pieces
  - name: Storage Market
    tags:
      - Asks
      - Deals
info:
  title: Filecoin JSON REST API
  description: Filecoin JSON REST API Description
  version: 0.1.0
  contact: 
    name: Filecoin JSON REST API SPEC
    email: erik.ingenito@protocol.ai
servers:
- url: http://127.0.0.1:3453/api/chain/v0
paths:
  /actors/actors:
    get:
      operationId: listActors
      summary: List actors
      description: List actors currently known to this node in ID order
      tags:
        - Actors
      parameters:
      - name: nextPageToken
        in: query
        description: Next page token
        required: false
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Actor'
  /actors/actors/{actorId}: # Ugh, clearly wrong
    get:
      operationId: getActorById
      summary: Find actor by ID
      description: Find a single actor record by ID
      tags:
        - Actors
      parameters: 
      - name: actorId
        in: path
        description: ID of the Actor to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Actor'
  /chain/tipsets:
    get:
      operationId: listTipsets
      summary: List tipsets
      description: List tipsets currently known to this node in reverse height order
      tags:
        - tipsets
      parameters:
      - name: nextPageToken
        in: query
        description: Next page token
        required: false
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tipset'
  /chain/tipsets/{tipsetId}:
    get:
      operationId: getTipsetById
      summary: Fetch a tipset by ID
      description: Find a single tipset record by ID
      tags:
        - tipsets
      parameters: 
      - name: tipsetId
        in: path
        description: ID of the Tipset to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tipset'
  /chain/blocks/{blockId}:
    get:
      operationId: getBlockById
      summary: Find block by ID
      description: Find a single block record by ID
      tags:
        - blocks
      parameters: 
      - name: blockId
        in: path
        description: ID of the Block to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /chain/messages:
    post:
      operationId: createMessage
      summary: Send a message
      description: This method sends a new message to an actor recipient.
      tags: 
        - messages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /chain/messages/{messageId}:
    get:
      operationId: getMessageById
      summary: Find message by ID
      description: Find a single message record by ID
      tags: 
        - nessages
      parameters: 
      - name: messageId
        in: path
        description: ID of the message to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /chain/executed-messages/{executedMessageId}:
    get:
      operationId: getExecutedMessageById
      summary: Find executed message by ID
      description: An executed message is one that has been included in a valid block in the chain. It includes return value and status information. Find a single executed message record by ID
      tags:
        - messages
      parameters: 
      - name: executedMessageId
        in: path
        description: ID of the executed message to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutedMessage'
  /control/node:
    get:
      operationId: getNode
      summary: Get information about the current Filecoin Node
      description: Get information about the current Filecoin Node
      tags:
        - Node
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
  /control/pieces:
    post:
      operationId: createPiece
      summary: Add a piece to local temporary storage
      description: This method imports data into the local node's temporary storage so that it can be transferred to a storage miner.  
      tags: 
        - Pieces
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PieceMetadata'
  /control/pieces/{pieceId}:
    get:
      operationId: getPieceById
      summary: Fetch piece data 
      description: Fetch piece data from the local node's temporary storage.
      tags:
        - Pieces
      parameters: 
      - name: pieceId
        in: path
        description: ID of the piece previously returned by corresponding createPiece POST method. 
        required: true
        schema:
          type: string
      responses:
        200:
          description: If the request succeeds, the server returns the original data used to create the piece.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: The raw bytes of the originally imported data. 
  /market/asks:
    get:
      operationId: listAsks
      summary: Lists all Asks in the market
      description: This endpoint returns all Asks known to the current node ordered lexically by the Ask ID
      tags:
        - Asks
      parameters:
      - name: minerId
        in: query
        description: Filter returned asks by minerId. Only Asks from this miner will be returned.
        required: false
        example: t2ytzk7whxrjb77kg4wd5fqy2cfse5jxajkqczfcq
        schema:
          type: string
      - name: active
        in: query
        description: Filter returned asks to include only those that are still active, meaning the current node's tipset height doesn't exceed that of the Ask's specified expiration.
        required: false
        example: true
        schema:
          type: boolean
      - name: nextPageToken
        in: query
        description: Next page token
        required: false
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ask'
    post:
      operationId: createAsk
      summary: Order this mining node to publish a new Ask on the network
      description: This method creates a new storage market ask and publishes it for storage buyers to find and act on.
      tags: 
        - Asks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ask'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ask'
  /market/asks/{askId}:
    get:
      operationId: getAskById
      summary: Fetch Ask data 
      description: Fetch data about an Ask by the Ask ID.
      tags:
        - Asks
      parameters: 
      - name: askId
        in: path
        description: ID of the Ask to fetch. 
        required: true
        schema:
          type: string
      responses:
        200:
          description: If the request succeeds, the server returns the requested Ask.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ask'
  /market/deals:
    get:
      operationId: getDeals
      summary: Fetch Deal information known to this node
      description: This endpoint returns a list of all deals known to the current node.  
      tags:
        - Deals
      parameters:
      - name: minerId
        in: query
        description: Filter returned Deals by minerId. Only Deals made with (or proposed to) the specified miner will be returned.
        required: false
        example: t2ytzk7whxrjb77kg4wd5fqy2cfse5jxajkqczfcq
        schema:
          type: string
      - name: clientId
        in: query
        description: Filter returned Deals by clientId. Only Deals initiated by the specified client will be returned.
        required: false
        example: t17vmiuyzqa3ygd4gsj5rsgglbj737wyztb4cohfy
        schema:
          type: string
      - name: pieceId
        in: query
        description: Filter returned Deals by pieceId. Only Deals made to store the specified pieceId will be returned.
        required: false
        example: QmYRHQCRVSznLwaR8kXtVH4KSZU5fqFPPSkxv9xsJV2QCY
        schema:
          type: string
      - name: nextPageToken
        in: query
        description: Next page token
        required: false
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Deal'
    post:
      operationId: createDeal
      summary: Initiate a storage deal
      description: This endpoint initiates a storage deal with a storage miner. It will create an appropriate payment Channel and vouchers, and pass the deal to the target storage miner to await acceptance or rejection.
      tags:
        - Deals
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deal'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Deal'
  /actors/channels:
    get:
      operationId: listChannels
      summary: List Channels
      description: List all payment channels known to this node
      tags:
        - Channels
      parameters:
      - name: nextPageToken
        in: query
        description: Next page token
        required: false
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
    post: 
      operationId: createChannel
      summary: Create new payment Channel
      description: This endpoint creates a new payment Channel with the specified characteristics
      tags:
        - Channels
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
  /actors/channels/{channelId}:
    get:
      operationId: getChannelById
      summary: Find channel by ID
      description: Find a payment Channel by ID and return it
      tags:
        - Channels
      parameters: 
      - name: channelId
        in: path
        description: ID of the Channel to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
    put:
      operationId: extendChannelById
      summary: Extends the duration of an existing payment channel
      description: This endpoint creates a new payment Channel with the specified attributes. 
      tags:
        - Channels
      parameters: 
      - name: channelId
        in: path
        description: ID of the Channel to fetch
        required: true
        schema:
          type: string
      requestBody:
        content:
          applications/json:
            schema:
              type: object
              properties:
                agreedEol:
                  type: number
                  description: The new chain (increased) height at which this channel will expire.
                  example: 2120399
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
  # extend channel: PATCH /channels/{channelId} {}
  # cancel channel (prematurely): POST /channels/{channelId}/cancel
  # close channel (with final payment?): POST /channels/{channelId}/close
  # reclaim funds (from expired channel): POST /channels/{channelId}/reclaim
  # redeem voucher: POST /channels/{channelId}/payments
  # create voucher: POST /channels/{channelId}/vouchers
components:
  schemas:
    Channel:
      type: object
      properties:
        id:
          type: string
          description: The ID of this Channel
          readOnly: true
        kind:
          type: string
          readOnly: true
          enum: [channel]
        targetActorId:
          type: string
          description: The address of the account to which funds will be transferred by this channel upon successful redemption of vouchers
          example: t17vmiuyzqa3ygd4gsj5rsgglbj737wyztb4cohfy
        amount:
          type: number
          description: The total amount of FIL that is in this channel and payable to the target
          example: 0.19296864
        amountRedeemed:
          type: number
          readOnly: true
          description: The total amount of FIL that has already been transfered to the target. This value cannot ever exceed amount. 
          example: 0
        agreedEol:
          type: number
          description: The original chain height at which this channel will expire. Specified upon creation and optionally extended by the creator of the channel.
          example: 2120399
        actualEol:
          type: number
          readOnly: true
          description: The actual expiration for the payment channel which can differ from agreedEol when the payment channel is in dispute 
        condition: 
          type: object
          readOnly: true
          description: The condition specified in the most recent payment voucher for which a redemption attempt was made. 
          example: TODO
        redeemed:
          type: boolean
          readOnly: true
          description: A flag indicated whether or not Redeem has been called on the payment channel yet. This is necessary because AmountRedeemed can still be zero in the event of a zero-value voucher
          example: true
    Deal:
      type: object
      properties:
        id:
          type: string
          description: The ID of this Deal
          readOnly: true
        kind:
          type: string
          readOnly: true
          enum: [deal]
        minerActorId:
          type: string
          description: The ID of the storage miner that is fulfilling this deal
          example: t2ytzk7whxrjb77kg4wd5fqy2cfse5jxajkqczfcq
        clientActorId:
          type: string
          readOnly: true
          description: The ID of the client initiating the storage deal (will typically be the owner of the current node)
          example: t17vmiuyzqa3ygd4gsj5rsgglbj737wyztb4cohfy
        pieceId:
          type: string
          description: The ID of the picee being stored
          example: QmYRHQCRVSznLwaR8kXtVH4KSZU5fqFPPSkxv9xsJV2QCY
        askId:
          type: string
          writeOnly: true
          description: The id of the Ask from the target miner for which this deal is to be proposed
          example: 0
        size:
          type: number
          readOnly: true  
          description: Size of the piece being stored in bytes
          example: 67003
        totalPrice:
          type: number
          readOnly: true
          description: The total price in FIL that will be paid for the entire storage operation
          example: 0.19296864
        duration:
          type: number
          description: The duration of the storage deal in blocks
          example: 288000
        paymentInfo: 
          type: object
          readOnly: true
          properties: 
            payerClientActorId: 
              type: string
              description: The address of the owner of the payment channel
            channelId:
              type: string
              description: The ID of the payment channel the client will use to pay the miner. It must already exist and have sufficient funds locked up in order to create a storage deal.
            channelMessageId:
              type: string
              description:  The ID of the message used to create the channel (so the miner can wait for it).
    Ask:
      type: object
      properties: 
        id:
          type: string
          description: The ID of this Ask
          readOnly: true
        kind:
          type: string
          enum: [ask]
        minerId:
          type: string
          readOnly: true
          description: The ID of the miner that published this Ask
          example: t2ytzk7whxrjb77kg4wd5fqy2cfse5jxajkqczfcq
        price:
          type: number
          description: The price in FIL per byte per blocktime
          example: 0.00000000001
        expiry:
          type: number
          description: The block height at which this ask expires
          example: 392265
    PieceMetadata: 
      type: object
      properties:
        id: 
          type: string
          example: QmQXJPWYEnt9GoYu5SXkrKMWovCX78YBjFzRSJF63Zobnj
          readOnly: true
    Sector:
      type: object
      properties:
        id:
          type: string
        commR:
          type: string  
    EmptyActorState:
      type: object 
      description: There is no additional state exposed by this actor
    AccountActorState:
      $ref: '#/components/schemas/EmptyActorState'
    InitActorState:
      type: object
      properties:
        nextId: 
          type: number
          description: The next numerical ID to allocate to a newly instantiated Actor
    StorageMarketActorState:
      type: object
      properties:
        totalStorage: 
          type: number
          description: Filecoin's total committed storage as of the current block.
    PaymentBrokerActorState:
      $ref: '#/components/schemas/EmptyActorState'
    MinerActorState:
      type: object
      properties: 
        owner:
          type: string
          description: The address of the account that owns this miner. Income and returned are paid to this address. This address is also allowed to change the worker address for the miner.
        worker:
          type: string
          description: The address of the worker account for this miner. This will be the key that is used to sign blocks created by this miner, and sign messages sent on behalf of this miner to commit sectors, submit PoSts, and other day to day miner activities.
        peerId: 
          type: string
          description: PeerID references the libp2p identity that the miner is operating.
        sectorSize:
          type: number
          description: SectorSize is the amount of space in each sector committed to the network by this miner.
        dePledgedCollateral:
          type: number
          description: Collateral that is waiting to be withdrawn
        dePledgeTime: 
          type: number
          description: Time at which the depledged collateral may be withdrawn
        sectors: 
          type: array
          items: 
            $ref: '#/components/schemas/Sector'
        provingSet:
          type: array
          items: 
            $ref: '#/components/schemas/Sector'
        currentFaultSet:
          type: string
        nextFaultSet:
          type: string
        nextDoneSet:
          type: string
        arbitratedDeals:
          type: string
        power:
          type: number
        slashedSet:
          type: array
          items: 
            $ref: '#/components/schemas/Sector'
        slashedAt:
          type: number
        ownedStorageCollateral:
          type: number
        provingPeriodEnd:
          type: number
    Actor:
      type: object
      properties:
        kind:
          type: string
          readOnly: true
          enum: [actor]
        id: 
          type: string
        role:
          type: string
          enum: [init,account,miner,storageMarket,paymentBroker]
        nonce:
          type: number
          description: Nonce is the nonce expected on the next message from this actor. Messages are processed in strict, contiguous nonce order. 
        balance:
          type: number
          description: Balance is the amount of FIL in the actor's account.
        stateRoot:
          type: string
          description: The CID of the root of the actor's state tree.
        info: 
            oneOf: 
              - $ref: '#/components/schemas/AccountActorState'
              - $ref: '#/components/schemas/InitActorState'
              - $ref: '#/components/schemas/MinerActorState'
              - $ref: '#/components/schemas/PaymentBrokerActorState'
              - $ref: '#/components/schemas/StorageMarketActorState'
    Block:
      type: object
      properties:
        kind:
          type: string
          enum: [block]
          readOnly: true
        id: 
          type: string
        header: 
          $ref: '#/components/schemas/BlockHeader'
        executedMessages:
          type: array
          items:
            $ref: '#/components/schemas/ExecutedMessage'
    BlockHeader:
      type: object
      properties:
        kind:
          type: string
          enum: [blockHeader]
          readOnly: true
        id: 
          type: string
        height: 
          type: number
        minerId: 
          type: string
        messageListId:
          type: string
        recieptListId:
          type: string
        tickets: 
          type: array
          items:
            type: string
        electionProof:
          type: string
        parentTipsetId:
          type: string
        parentWeight:
          type: number
        stateRoot:
          type: string
        timestamp:
          type: number
        blsAggregate:
          type: string
        signature:
          type: string
    ExecutedMessage:
      type: object
      properties:
        kind:
          type: string
          enum: [executedMessage]
          readOnly: true
        id:
          type: string
          readOnly: true
        blockId:
          type: string
          readOnly: true
        message:
          $ref: '#/components/schemas/Message'
        exitCode: 
          type: number
          readOnly: true
        return: 
          type: object
          readOnly: true
    Message:
      type: object
      properties:
        kind:
          type: string
          enum: [mxecutedMessage]
          readOnly: true
        id:
          type: string
          readOnly: true
        nonce:
          type: number
          readOnly: true
        from: 
          type: string
          readOnly: true
        to: 
          type: string
        value:
          type: number
        gasPrice: 
          type: number
        gasLimit:
          type: number
        method: 
          type: string
        parameters: 
          type: object
        signature: 
          type: string
          readOnly: true
    PeerAddresses: 
      type: array
      description: List of peer (network) addresses
      items:
        type: string
        example: /ip4/127.0.0.1/tcp/6000/ipfs/QmeGwW4Nm543yYe5gchbETzzpcUJsPc7xtLkj7g5GCmMLq
    Node:
      type: object
      properties:
        kind:
          type: string
          enum: [node]
          readOnly: true
        id: 
          type: string
          example: QmeGwW4Nm543yYe5gchbETzzpcUJsPc7xtLkj7g5GCmMLq
        addresses:
          $ref: '#/components/schemas/PeerAddresses'
        version:
          type: string
          example: "1.0.2"
        commit:
          type: string
          example: "93540266a2a9972e91947a538ce70dc9c4e8077e"
        protocol:
          type: object
          properties:
            autoSealInterval: 
              type: number
              description: Auto-Seal Interval in Seconds
            sectorSizes:
              type: array
              description: Supoorted sector sizes in bytes
              items:
                type: number 
        bitswapStats:
          type: object
          properties:
            blocksReceived: 
              type: number
            blocksSent: 
              type: number
            dataReceived: 
              type: number
            dataSent: 
              type: number
            dupBlksReceived:
              type: number
            dupDataReceived: 
              type: number
            messagesReceived: 
              type: number
            ProvideBufLen: 
              type: number
            peers:
              type: array
              description: Filecoin Addresses of currently connected peers
              items:
                type: string
                example: 'QmUA8TXLxsfuifpyHPxGfwWgXSCr6omqb6bdQy2KwWQCBz'
            wantlist:
              type: array
              description: CIDs of currently desired content blocks
              items:
                type: string
                example: 'QmQXJPWYEnt9GoYu5SXkrKMWovCX78YBjFzRSJF63Zobnj'
        config:
          type: object
          description: Full JSON representation of the node's current configuration
    Tipset:
      type: object
      properties:
        kind: 
          type: string
          enum: [tipset]
          readOnly: true
        id:
          type: string
          readOnly: true
          example: 'zDPWYqFCyaQ9QJHr1qWZ19rFg3YRkcuXREkvpiHRJZhGN5T8SnyJ'
        height:
          type: number
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/BlockHeader'