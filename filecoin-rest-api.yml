openapi: 3.0.2
tags:
  - name: Actors
  - name: Node
  - name: blocks
  - name: messages
  - name: tipsets
    description: Operations on tipsets
x-tagGroups:
  - name: Chain Resources
    tags:
      - tipsets
      - blocks
      - messages
  - name: Actors
    tags:
      - actors
  - name: Control
    tags:
      - Node
      - Address
info:
  title: Filecoin JSON REST API
  description: Filecoin JSON REST API Description
  version: 0.1.0
  contact: 
    name: Filecoin JSON REST API SPEC
    email: erik.ingenito@protocol.ai
servers:
- url: http://127.0.0.1:3453/api/chain/v0
paths:
  /actors/actors:
    get:
      operationId: listActors
      summary: List actors
      description: List actors currently known to this node in ID order
      tags:
        - actors
      parameters:
      - name: nextPageToken
        in: query
        description: Next page token
        required: false
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Actor'
  /actors/{actorId}:
    get:
      operationId: getActorById
      summary: Find actor by ID
      description: Find a single actor record by ID
      tags:
        - actors
      parameters: 
      - name: actorId
        in: path
        description: ID of the Actor to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Actor'
  /chain/tipsets:
    get:
      operationId: listTipsets
      summary: List tipsets
      description: List tipsets currently known to this node in reverse height order
      tags:
        - tipsets
      parameters:
      - name: nextPageToken
        in: query
        description: Next page token
        required: false
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tipset'
  /chain/tipsets/{tipsetId}:
    get:
      operationId: getTipsetById
      summary: Fetch a tipset by ID
      description: Find a single tipset record by ID
      tags:
        - tipsets
      parameters: 
      - name: tipsetId
        in: path
        description: ID of the Tipset to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tipset'
  /chain/block/{blockId}:
    get:
      operationId: getBlockById
      summary: Find block by ID
      description: Find a single block record by ID
      tags:
        - blocks
      parameters: 
      - name: blockId
        in: path
        description: ID of the Block to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /chain/messages:
    post:
      operationId: createMessage
      summary: Send a message
      description: This method sends a new message to an actor recipient.
      tags: 
        - messages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /chain/messages/{messageId}:
    get:
      operationId: getMessageById
      summary: Find message by ID
      description: Find a single message record by ID
      tags: 
        - nessages
      parameters: 
      - name: messageId
        in: path
        description: ID of the message to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /chain/executed-messages/{executedMessageId}:
    get:
      operationId: getExecutedMessageById
      summary: Find executed message by ID
      description: An executed message is one that has been included in a valid block in the chain. It includes return value and status information. Find a single executed message record by ID
      tags:
        - messages
      parameters: 
      - name: executedMessageId
        in: path
        description: ID of the executed message to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutedMessage'
  # This is a terrible place for this - maybe address should be reserved for wallet operations
  /control/address/{minerId}:
    get:
      operationId: getAddressForMiner
      summary: Fetch peer address for Miner
      description: Fetches the peer address(es) for the miner with the specified address.
      tags:
        - Address
      parameters: 
      - name: minerId
        in: path
        description: The Filecoin Address of the miner to fetch the Peer (libp2p network) addresses for.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeerAddresses'
  /control/node:
    get:
      operationId: getNode
      summary: Get information about the current Filecoin Node
      description: Get information about the current Filecoin Node
      tags:
        - Node
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
components:
  schemas:
    Sector:
      type: object
      properties:
        id:
          type: string
        commR:
          type: string  
    EmptyActorState:
      type: object 
      description: There is no additional state exposed by this actor
    AccountActorState:
      $ref: '#/components/schemas/EmptyActorState'
    InitActorState:
      type: object
      properties:
        nextId: 
          type: number
          description: The next numerical ID to allocate to a newly instantiated Actor
    StorageMarketActorState:
      type: object
      properties:
        totalStorage: 
          type: number
          description: Filecoin's total committed storage as of the current block.
    PaymentBrokerActorState:
      $ref: '#/components/schemas/EmptyActorState'
    MinerActorState:
      type: object
      properties: 
        owner:
          type: string
          description: The address of the account that owns this miner. Income and returned are paid to this address. This address is also allowed to change the worker address for the miner.
        worker:
          type: string
          description: The address of the worker account for this miner. This will be the key that is used to sign blocks created by this miner, and sign messages sent on behalf of this miner to commit sectors, submit PoSts, and other day to day miner activities.
        peerId: 
          type: string
          description: PeerID references the libp2p identity that the miner is operating.
        sectorSize:
          type: number
          description: SectorSize is the amount of space in each sector committed to the network by this miner.
        dePledgedCollateral:
          type: number
          description: Collateral that is waiting to be withdrawn
        dePledgeTime: 
          type: number
          description: Time at which the depledged collateral may be withdrawn
        sectors: 
          type: array
          items: 
            $ref: '#/components/schemas/Sector'
        provingSet:
          type: array
          items: 
            $ref: '#/components/schemas/Sector'
        currentFaultSet:
          type: string
        nextFaultSet:
          type: string
        nextDoneSet:
          type: string
        arbitratedDeals:
          type: string
        power:
          type: number
        slashedSet:
          type: array
          items: 
            $ref: '#/components/schemas/Sector'
        slashedAt:
          type: number
        ownedStorageCollateral:
          type: number
        provingPeriodEnd:
          type: number
    Actor:
      type: object
      properties:
        kind:
          type: string
          enum: [actor]
        id: 
          type: string
        role:
          type: string
          enum: [init,account,miner,storageMarket,paymentBroker]
        nonce:
          type: number
          description: Nonce is the nonce expected on the next message from this actor. Messages are processed in strict, contiguous nonce order. 
        balance:
          type: number
          description: Balance is the amount of FIL in the actor's account.
        stateRoot:
          type: string
          description: The CID of the root of the actor's state tree.
        info: 
            oneOf: 
              - $ref: '#/components/schemas/AccountActorState'
              - $ref: '#/components/schemas/InitActorState'
              - $ref: '#/components/schemas/MinerActorState'
              - $ref: '#/components/schemas/PaymentBrokerActorState'
              - $ref: '#/components/schemas/StorageMarketActorState'
    Block:
      type: object
      properties:
        kind:
          type: string
          enum: [block]
        id: 
          type: string
        header: 
          $ref: '#/components/schemas/BlockHeader'
        executedMessages:
          type: array
          items:
            $ref: '#/components/schemas/ExecutedMessage'
    BlockHeader:
      type: object
      properties:
        kind:
          type: string
          enum: [blockHeader]
          readOnly: true
        id: 
          type: string
        height: 
          type: number
        minerId: 
          type: string
        messageListId:
          type: string
        recieptListId:
          type: string
        tickets: 
          type: array
          items:
            type: string
        electionProof:
          type: string
        parentTipsetId:
          type: string
        parentWeight:
          type: number
        stateRoot:
          type: string
        timestamp:
          type: number
        blsAggregate:
          type: string
        signature:
          type: string
    ExecutedMessage:
      type: object
      properties:
        kind:
          type: string
          enum: [executedMessage]
          readOnly: true
        id:
          type: string
          readOnly: true
        blockId:
          type: string
          readOnly: true
        message:
          $ref: '#/components/schemas/Message'
        exitCode: 
          type: number
          readOnly: true
        return: 
          type: object
          readOnly: true
    Message:
      type: object
      properties:
        kind:
          type: string
          enum: [mxecutedMessage]
          readOnly: true
        id:
          type: string
          readOnly: true
        nonce:
          type: number
          readOnly: true
        from: 
          type: string
          readOnly: true
        to: 
          type: string
        value:
          type: number
        gasPrice: 
          type: number
        gasLimit:
          type: number
        method: 
          type: string
        parameters: 
          type: object
        signature: 
          type: string
          readOnly: true
    PeerAddresses: 
      type: array
      description: List of peer (network) addresses
      items:
        type: string
        example: /ip4/127.0.0.1/tcp/6000/ipfs/QmeGwW4Nm543yYe5gchbETzzpcUJsPc7xtLkj7g5GCmMLq
    Node:
      type: object
      properties:
        kind:
          type: string
          enum: [node]
        id: 
          type: string
          example: QmeGwW4Nm543yYe5gchbETzzpcUJsPc7xtLkj7g5GCmMLq
        addresses:
          $ref: '#/components/schemas/PeerAddresses'
        version:
          type: string
          example: "1.0.2"
        commit:
          type: string
          example: "93540266a2a9972e91947a538ce70dc9c4e8077e"
        protocol:
          type: object
          properties:
            autoSealInterval: 
              type: number
              description: Auto-Seal Interval in Seconds
            sectorSizes:
              type: array
              description: Supoorted sector sizes in bytes
              items:
                type: number 
        bitswapStats:
          type: object
          properties:
            blocksReceived: 
              type: number
            blocksSent: 
              type: number
            dataReceived: 
              type: number
            dataSent: 
              type: number
            dupBlksReceived:
              type: number
            dupDataReceived: 
              type: number
            messagesReceived: 
              type: number
            ProvideBufLen: 
              type: number
            peers:
              type: array
              description: Filecoin Addresses of currently connected peers
              items:
                type: string
                example: 'QmUA8TXLxsfuifpyHPxGfwWgXSCr6omqb6bdQy2KwWQCBz'
            wantlist:
              type: array
              description: CIDs of currently desired content blocks
              items:
                type: string
                example: 'QmQXJPWYEnt9GoYu5SXkrKMWovCX78YBjFzRSJF63Zobnj'
        config:
          type: object
          description: Full JSON representation of the node's current configuration
    Tipset:
      type: object
      properties:
        kind: 
          type: string
          enum: [tipset]
          readOnly: true
        id:
          type: string
          readOnly: true
          example: 'zDPWYqFCyaQ9QJHr1qWZ19rFg3YRkcuXREkvpiHRJZhGN5T8SnyJ'
        height:
          type: number
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/BlockHeader'