openapi: 3.0.2
tags:
  - name: ActorModel
    x-displayName: Actor
    description: |
      This is a description
      <SchemaDefinition schemaRef="#/components/schemas/Actor"/>
  - name: Actors
  - name: AskModel
    x-displayName: Ask
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Ask"/>
  - name: BlockHeaderModel
    x-displayName: BlockHeader
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/BlockHeader"/>
  - name: BlockModel
    x-displayName: Block
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Block"/>
  - name: Blocks
  - name: ChannelModel
    x-displayName: Channel
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Channel"/>
  - name: DealModel
    x-displayName: Deal
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Deal"/>
  - name: ExecutedMessageModel
    x-displayName: ExecutedMessage
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/ExecutedMessage"/>
  - name: MessageModel
    x-displayName: Message
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Message"/>
  - name: Messages
  - name: Node
  - name: NodeModel
    x-displayName: Node
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Node"/>
  - name: TipsetModel
    x-displayName: Tipset
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Tipset"/>
  - name: Tipsets
  - name: VoucherModel
    x-displayName: Voucher
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Voucher"/>
x-tagGroups:
  - name: Chain Resources
    tags:
      - Tipsets
      - Blocks
      - Messages
  - name: Actor Endpoints
    tags:
      - Actors
      - Channels
  - name: Node Control Endpoints
    tags:
      - Node
      - Address
      - Pieces
  - name: Storage Market Endpoints
    tags:
      - Asks
      - Deals
  - name: Models
    tags:
      - ActorModel
      - AskModel
      - BlockModel
      - BlockHeaderModel
      - ChannelModel
      - DealModel
      - ExecutedMessageModel
      - MessageModel
      - NodeModel
      - TipsetModel
      - VoucherModel
info:
  title: Filecoin JSON REST API
  description: Filecoin JSON REST API Description
  version: 0.1.0
  contact: 
    name: Filecoin JSON REST API SPEC
    email: erik.ingenito@protocol.ai
servers:
- url: http://127.0.0.1:3453/api/chain/v0
components:
  schemas:
    Actor: 
      $ref: 'actors.yml#/models/Actor' 
    Block:
      $ref: 'chain.yml#/models/Block'
    BlockHeader:
      $ref: 'chain.yml#/models/BlockHeader'
    ExecutedMessage:
      $ref: 'chain.yml#/models/ExecutedMessage'
    Message:
      $ref: 'chain.yml#/models/Message'
    Tipset:
      $ref: 'chain.yml#/models/Tipset'
    Voucher:
      type: object
      properties:
        kind:
          type: string
          readOnly: true
          enum: [voucher]
        channelId:
          type: string
          description: The ID of the payment Channel this Voucher is redeemable against. 
          readOnly: true
          example: TODO
        payer:
          type: string
          description: The Actor ID (address) of the creator of the payment channel for this voucher. 
          readOnly: true
          example: TODO
        target:
          type: string
          description: The Actor ID (address) of the recipient of the funds in this voucher. 
          readOnly: true 
          example: TODO
        amount:
          type: number
          description: The amount of FIL this Voucher is worth. This amount is sent to the target when this voucher is redeemed.
          example: 0.19296864
        validAt:
          type: number
          description: The block height on or after which this Voucher can be redeemed. 
          example: 2120399
        condition:
          type: object
          description: The condition that must evaluate to true for this Voucher to be redeemed. 
          example: TODO
        signature:
          type: string
          description: The signature over all the data in this Voucher
          example: TODO
    Channel:
      type: object
      properties:
        id:
          type: string
          description: The ID of this Channel
          readOnly: true
        kind:
          type: string
          readOnly: true
          enum: [channel]
        targetActorId:
          type: string
          description: The address of the account to which funds will be transferred by this Channel upon successful redemption of vouchers
          example: t17vmiuyzqa3ygd4gsj5rsgglbj737wyztb4cohfy
        amount:
          type: number
          description: The total amount of FIL that is in this Channel and payable to the target
          example: 0.19296864
        amountRedeemed:
          type: number
          readOnly: true
          description: The total amount of FIL that has already been transfered to the target. This value cannot ever exceed amount. 
          example: 0
        agreedEol:
          type: number
          description: The original chain height at which this Channel will expire. Specified upon creation and optionally extended by the creator of the channel.
          example: 2120399
        actualEol:
          type: number
          readOnly: true
          description: The actual expiration for the payment Channel which can differ from agreedEol when the payment channel is in dispute 
        condition: 
          type: object
          readOnly: true
          description: The condition specified in the most recent payment voucher for which a redemption attempt was made. 
          example: TODO
        redeemed:
          type: boolean
          readOnly: true
          description: A flag indicated whether or not Redeem has been called on the payment Channel yet. This is necessary because AmountRedeemed can still be zero in the event of a zero-value voucher
          example: true
    Deal:
      type: object
      properties:
        id:
          type: string
          description: The ID of this Deal
          readOnly: true
        kind:
          type: string
          readOnly: true
          enum: [deal]
        minerActorId:
          type: string
          description: The ID of the storage miner that is fulfilling this Deal
          example: t2ytzk7whxrjb77kg4wd5fqy2cfse5jxajkqczfcq
        clientActorId:
          type: string
          readOnly: true
          description: The ID of the client initiating the storage Deal (will typically be the owner of the current node)
          example: t17vmiuyzqa3ygd4gsj5rsgglbj737wyztb4cohfy
        pieceId:
          type: string
          description: The ID of the Picee being stored
          example: QmYRHQCRVSznLwaR8kXtVH4KSZU5fqFPPSkxv9xsJV2QCY
        size:
          type: number
          readOnly: true  
          description: Size of the Piece being stored in bytes
          example: 67003
        askId:
          type: string
          writeOnly: true
          description: The ID of the Ask from the target miner for which this Deal is to be proposed
          example: 0
        totalPrice:
          type: number
          readOnly: true
          description: The total price in FIL that will be paid for the entire storage operation
          example: 0.19296864
        duration:
          type: number
          description: The duration of this storage Deal in blocks
          example: 288000
        status:
          type: string
          description: The current status of the Deal 
          enum: [unknown,rejected,accepted,started,failed,staged,sealing,complete]
          example: complete
        paymentInfo: 
          type: object
          readOnly: true
          properties: 
            payerClientActorId: 
              type: string
              description: The address of the owner of the payment Channel
            channelId:
              type: string
              description: The ID of the payment Channel the client will use to pay the miner. It must already exist and have sufficient funds locked up in order to create a storage deal.
            channelMessageId:
              type: string
              description:  The ID of the Message used to create the Channel (so the miner can wait for it).
    Ask:
      type: object
      properties: 
        id:
          type: string
          description: The ID of this Ask
          readOnly: true
        kind:
          type: string
          enum: [ask]
        minerId:
          type: string
          readOnly: true
          description: The ID of the miner that published this Ask
          example: t2ytzk7whxrjb77kg4wd5fqy2cfse5jxajkqczfcq
        price:
          type: number
          description: The price in FIL per byte per blocktime
          example: 0.00000000001
        expiry:
          type: number
          description: The block height at which this ask expires
          example: 392265
    PieceMetadata: 
      type: object
      properties:
        id: 
          type: string
          example: QmQXJPWYEnt9GoYu5SXkrKMWovCX78YBjFzRSJF63Zobnj
          readOnly: true
    Sector:
      type: object
      properties:
        id:
          type: string
        commR:
          type: string
    PeerAddresses: 
      type: array
      description: List of peer (network) addresses
      items:
        type: string
        example: /ip4/127.0.0.1/tcp/6000/ipfs/QmeGwW4Nm543yYe5gchbETzzpcUJsPc7xtLkj7g5GCmMLq
    Node:
      type: object
      properties:
        kind:
          type: string
          enum: [node]
          readOnly: true
        id: 
          type: string
          example: QmeGwW4Nm543yYe5gchbETzzpcUJsPc7xtLkj7g5GCmMLq
        addresses:
          $ref: '#/components/schemas/PeerAddresses'
        version:
          type: string
          example: "1.0.2"
        commit:
          type: string
          example: "93540266a2a9972e91947a538ce70dc9c4e8077e"
        protocol:
          type: object
          properties:
            autoSealInterval: 
              type: number
              description: Auto-Seal Interval in Seconds
            sectorSizes:
              type: array
              description: Supoorted sector sizes in bytes
              items:
                type: number 
        bitswapStats:
          type: object
          properties:
            blocksReceived: 
              type: number
            blocksSent: 
              type: number
            dataReceived: 
              type: number
            dataSent: 
              type: number
            dupBlksReceived:
              type: number
            dupDataReceived: 
              type: number
            messagesReceived: 
              type: number
            ProvideBufLen: 
              type: number
            peers:
              type: array
              description: Filecoin Addresses of currently connected peers
              items:
                type: string
                example: 'QmUA8TXLxsfuifpyHPxGfwWgXSCr6omqb6bdQy2KwWQCBz'
            wantlist:
              type: array
              description: CIDs of currently desired content blocks
              items:
                type: string
                example: 'QmQXJPWYEnt9GoYu5SXkrKMWovCX78YBjFzRSJF63Zobnj'
        config:
          type: object
          description: Full JSON representation of the node's current configuration
paths:
  /actors:
    $ref: './actors.yml#/endpoints/actors_collection'
  /actors/{actorId}:
    $ref: './actors.yml#/endpoints/actor_resource'
  /chain/tipsets:
    $ref: './chain.yml#/endpoints/tipsets_collection'
  /chain/tipsets/{tipsetId}:
    $ref: './chain.yml#/endpoints/tipset_resource'
  /chain/blocks/{blockId}:
    $ref: './chain.yml#/endpoints/block_resource'
  /chain/messages:
    $ref: './chain.yml#/endpoints/messages_collection'
  /chain/messages/{messageId}:
    $ref: './chain.yml#/endpoints/message_resource'
  /chain/executed-messages/{executedMessageId}:
    $ref: './chain.yml#/endpoints/executed_message_resource'
  /control/node:
    get:
      operationId: getNode
      summary: Return Node information
      description: Get information about the current Filecoin Node.
      tags:
        - Node
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
  /control/pieces:
    post:
      operationId: createPiece
      summary: Add a Piece to local storage
      description: This method imports data into the local node's temporary storage so that it can be transferred to a storage miner.  
      tags: 
        - Pieces
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PieceMetadata'
  /control/pieces/{pieceId}:
    get:
      operationId: getPieceById
      summary: Fetch piece data 
      description: Fetch piece data from the local node's temporary storage.
      tags:
        - Pieces
      parameters: 
      - name: pieceId
        in: path
        description: ID of the piece previously returned by corresponding createPiece POST method. 
        required: true
        schema:
          type: string
      responses:
        200:
          description: If the request succeeds, the server returns the original data used to create the piece.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: The raw bytes of the originally imported data. 
  /market/asks:
    get:
      operationId: listAsks
      summary: Lists all Asks in the market
      description: This endpoint returns all Asks known to the current node ordered lexically by the Ask ID
      tags:
        - Asks
      parameters:
      - name: minerId
        in: query
        description: Filter returned asks by minerId. Only Asks from this miner will be returned.
        required: false
        example: t2ytzk7whxrjb77kg4wd5fqy2cfse5jxajkqczfcq
        schema:
          type: string
      - name: active
        in: query
        description: Filter returned asks to include only those that are still active, meaning the current node's tipset height doesn't exceed that of the Ask's specified expiration.
        required: false
        example: true
        schema:
          type: boolean
      - name: nextPageToken
        in: query
        description: Next page token
        required: false
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ask'
    post:
      operationId: createAsk
      summary: Order this mining node to publish a new Ask on the network
      description: This method creates a new storage market ask and publishes it for storage buyers to find and act on.
      tags: 
        - Asks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ask'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ask'
  /market/asks/{askId}:
    get:
      operationId: getAskById
      summary: Fetch Ask data 
      description: Fetch data about an Ask by the Ask ID.
      tags:
        - Asks
      parameters: 
      - name: askId
        in: path
        description: ID of the Ask to fetch. 
        required: true
        schema:
          type: string
      responses:
        200:
          description: If the request succeeds, the server returns the requested Ask.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ask'
  /market/deals:
    get:
      operationId: getDeals
      summary: Fetch Deal information known to this node
      description: This endpoint returns a list of all deals known to the current node.  
      tags:
        - Deals
      parameters:
      - name: minerId
        in: query
        description: Filter returned Deals by minerId. Only Deals made with (or proposed to) the specified miner will be returned.
        required: false
        example: t2ytzk7whxrjb77kg4wd5fqy2cfse5jxajkqczfcq
        schema:
          type: string
      - name: clientId
        in: query
        description: Filter returned Deals by clientId. Only Deals initiated by the specified client will be returned.
        required: false
        example: t17vmiuyzqa3ygd4gsj5rsgglbj737wyztb4cohfy
        schema:
          type: string
      - name: pieceId
        in: query
        description: Filter returned Deals by pieceId. Only Deals made to store the specified pieceId will be returned.
        required: false
        example: QmYRHQCRVSznLwaR8kXtVH4KSZU5fqFPPSkxv9xsJV2QCY
        schema:
          type: string
      - name: nextPageToken
        in: query
        description: Next page token
        required: false
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Deal'
    post:
      operationId: createDeal
      summary: Initiate a storage deal
      description: This endpoint initiates a storage deal with a storage miner. It will create an appropriate payment Channel and vouchers, and pass the deal to the target storage miner to await acceptance or rejection.
      tags:
        - Deals
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deal'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Deal'
  /actors/channels:
    get:
      operationId: listChannels
      summary: List Channels
      description: List all payment channels known to this node
      tags:
        - Channels
      parameters:
      - name: nextPageToken
        in: query
        description: Next page token
        required: false
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
    post: 
      operationId: createChannel
      summary: Create new payment Channel
      description: This endpoint creates a new payment Channel with the specified characteristics
      tags:
        - Channels
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
  /actors/channels/{channelId}: # Right now it's not possible to look up Channels by ID alone, only by Payee/ID, channel ID could just be a concatenation
    get:
      operationId: getChannelById
      summary: Find Channel by ID
      description: Find a payment Channel by ID and return it
      tags:
        - Channels
      parameters: 
      - name: channelId
        in: path
        description: ID of the Channel to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
    patch:
      operationId: extendChannelById
      summary: Extend duration of Channel
      description: This endpoint extends the duration of an existing payment Channel, increasing the block height at which the Channel will timeout. Only the payer (creator) or the channel can successfully call this endpoint. 
      tags:
        - Channels
      parameters: 
      - name: channelId
        in: path
        description: ID of the Channel to fetch
        required: true
        schema:
          type: string
      requestBody:
        content:
          applications/json:
            schema:
              type: object
              properties:
                agreedEol:
                  type: number
                  description: The new chain (increased) height at which this channel will expire.
                  example: 2120399
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
  /actors/channels/{channelId}/close:
    post:
      operationId: closeChannel
      summary: Close Channel
      description: This endpoint closes the specified payment Channel and returns all unredeemed funds to the payee (the Channel's creator). Upon completion this Channel is effectively deleted and can never be used again. This method can only be called by target of the Channel with a valid voucher - any other invocation is an error.
      tags:
        - Channels
      parameters: 
      - name: channelId
        in: path
        description: ID of the Channel to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
  /actors/channels/{channelId}/cancel:
    post:
      operationId: cancelChannel
      summary: Schedule Channel for cancellation
      description: This endpoint reduces the actual eol (effective end date) of the Channel in an attempt to free up the funds in the channel for earlier reclaming. This endpoint can only successfullly be called by the Channel's payer as the cancel message needs to originate from that account. Cancel doesn't immediately close a channel but instead reduces the lifetime of the channel leaving a grace period during which the payee can undo the cancellation by submitting a valid voucher, thereby proving that the channel is still in use.
      tags:
        - Channels
      parameters: 
      - name: channelId
        in: path
        description: ID of the Channel to cancel
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
  /actors/channels/{channelId}/reclaim:
    post:
      operationId: reclaimChannel
      summary: Reclaim unspent funds in Channel
      description: This endpoint is used by the creator (payer) of a Channel to reclaim unspent funds when a Channel has timed out (the chain height has exceeded the eol of the Channel). It can only successfully be called by the Channel's payer on a timed out Channel.
      tags:
        - Channels
      parameters: 
      - name: channelId
        in: path
        description: ID of the Channel to reclaim
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
  /actors/channels/{channelId}/redeem:
    post:
      operationId: redeemVoucher
      summary: Redeem Voucher
      description: This endpoint accepts a voucher from the Channel target and redeems it. Upon checking the validity and successfully checking the voucher's condition the specified funds will be transfered from the channel to the target. 
      tags:
        - Channels
      parameters: 
      - name: channelId
        in: path
        description: ID of the Channel to fetch
        required: true
        schema:
          type: string
      requestBody:
        content:
          applications/json:
            schema:
                $ref: '#/components/schemas/Voucher'
      responses:
        200:
          description: Success
  /actors/channels/{channelId}/vouchers:
    post:
      operationId: createVoucher
      summary: Creates Voucher
      description: This endpoint accepts voucher details and returns a new signed voucher suitable for off chain transmission to the Channel target for later redemption. Only the Channel payer (creator) can call this endpoint successfully. 
      tags:
        - Channels
      parameters: 
      - name: channelId
        in: path
        description: ID of the Channel to fetch
        required: true
        schema:
          type: string
      requestBody:
        content:
          applications/json:
            schema:
                $ref: '#/components/schemas/Voucher'
      responses:
        200:
          description: Success
