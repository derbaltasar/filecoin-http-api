openapi: 3.0.2
tags:
  - name: ActorModel
    x-displayName: Actor
    description: |
      Actor is the central abstraction of entities in the system. See the [Actor Specification](https://github.com/filecoin-project/specs/blob/master/data-structures.md#actor) for more information.

      Both individual accounts, as well as contracts (user & system level) are represented as actors. An actor has the following core functionality implemented on a system level:
      - track a Filecoin balance, using the `Balance` field
      - execute code stored in the `Code` field
      - read & write memory
      - replay protection, using the `Nonce` field

      Value sent to a non-existent address will be tracked as an empty actor that has a Balance but nil Code and Memory. You must nil check Code cids before comparing them.

      More specific capabilities for individual accounts or contract specific must be implemented inside the code.
      <SchemaDefinition schemaRef="#/components/schemas/Actor"/>
  - name: Actors
  - name: AskModel
    x-displayName: Ask
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Ask"/>
  - name: BlockHeaderModel
    x-displayName: BlockHeader
    description: |
      A BlockHeader contains information relating to a Block. In the Filecoin specification there is no difference between a BlockHeader and a Block, but for the purposees of this API a Block wraps a BlockHeader and additionally contains the full contents of all messages included in that Block.
      <SchemaDefinition schemaRef="#/components/schemas/BlockHeader"/>
  - name: BlockModel
    x-displayName: Block
    description: |
      A Block contains information relevant to a particular point in time over which the network may achieve consensus. Blocks are mined as part of the consensus mechanism by elected miners and then included in a Tipset.
      <SchemaDefinition schemaRef="#/components/schemas/Block"/>
  - name: Blocks
  - name: ChannelModel
    x-displayName: Channel
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Channel"/>
  - name: DealModel
    x-displayName: Deal
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Deal"/>
  - name: ExecutedMessageModel
    x-displayName: ExecutedMessage
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/ExecutedMessage"/>
  - name: MessageModel
    x-displayName: Message
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Message"/>
  - name: Messages
  - name: Node
  - name: NodeModel
    x-displayName: Node
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Node"/>
  - name: TipsetModel
    x-displayName: Tipset
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Tipset"/>
  - name: Tipsets
  - name: VoucherModel
    x-displayName: Voucher
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Voucher"/>
x-tagGroups:
  - name: Chain Resources
    tags:
      - Tipsets
      - Blocks
      - Messages
  - name: Actor Endpoints
    tags:
      - Actors
  - name: Channel Endpoints
    tags:
      - Channels
  - name: Node Control Endpoints
    tags:
      - Node
      - Address
      - Pieces
  - name: Storage Market Endpoints
    tags:
      - Asks
      - Deals
  - name: Models
    tags:
      - ActorModel
      - AskModel
      - BlockModel
      - BlockHeaderModel
      - ChannelModel
      - DealModel
      - ExecutedMessageModel
      - MessageModel
      - NodeModel
      - TipsetModel
      - VoucherModel
info:
  title: Filecoin JSON REST API
  description: Filecoin JSON REST API Description
  version: 0.1.0
  contact: 
    name: Filecoin JSON REST API SPEC
    email: erik.ingenito@protocol.ai
servers:
- url: http://127.0.0.1:3453/api/chain/v0
security:
  - 'Bearer Token Authentication': []
components:
  securitySchemes:
    'Bearer Token Authentication':
      type: http
      scheme: Bearer Token
      description: |
        V0 of this API supports all or nothing authentication and authorization suitable for use by the owner/operator of the current node, and nothing else. Callers of the API must provide a bearer token included in the Authorization header of each request. This token should be provided by the node for use by the caller via some out of band mechanism (like a file created on the filesystem upon initialization or upon startup).

        This API must be served over SSL/TLS. Future versions of the API can add more complex schemes.

        Here is an example of using a node provided bearer token and a node provided CA cert used for self-signed TLS with curl. This example assumes the cert and token both reside in the .filecoin folder and where generated by the go-filecoin daemon:
        ```
        $ AUTH="Authorization: Bearer $(xxd -ps -u -c 1000 $HOME/.filecoin/api/admin.token)"
        $ curl -X GET --cacert $HOME/.filecoin/api/tls.cert --header "$AUTH" \
        > https://localhost:3453/api/filecoin/v0/tipsets
        ```

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  schemas:
    Actor: 
      $ref: 'actors.yml#/models/Actor'
    Ask:
      $ref: 'market.yml#/models/Ask'
    Block:
      $ref: 'chain.yml#/models/Block'
    BlockHeader:
      $ref: 'chain.yml#/models/BlockHeader'
    Channel:
      $ref: 'channels.yml#/models/Channel'
    Deal:
      $ref: 'market.yml#/models/Deal'
    ExecutedMessage:
      $ref: 'chain.yml#/models/ExecutedMessage'
    Message:
      $ref: 'chain.yml#/models/Message'
    Node:
      $ref: 'control.yml#/models/Node'
    PeerAddresses:
      $ref: 'control.yml#/models/PieceMetadata'
    PieceMetadata:
      $ref: 'control.yml#/models/PieceMetadata'
    Tipset:
      $ref: 'chain.yml#/models/Tipset'
    Voucher:
      $ref: 'channels.yml#/models/Voucher'
    Sector:
      $ref: 'actors.yml#/models/Sector'
paths:
  /actors:
    $ref: './actors.yml#/endpoints/actors_collection'
  /actors/{actorId}:
    $ref: './actors.yml#/endpoints/actor_resource'
  /chain/tipsets:
    $ref: './chain.yml#/endpoints/tipsets_collection'
  /chain/tipsets/{tipsetId}:
    $ref: './chain.yml#/endpoints/tipset_resource'
  /chain/blocks/{blockId}:
    $ref: './chain.yml#/endpoints/block_resource'
  /chain/messages:
    $ref: './chain.yml#/endpoints/messages_collection'
  /chain/messages/{messageId}:
    $ref: './chain.yml#/endpoints/message_resource'
  /chain/executed-messages/{executedMessageId}:
    $ref: './chain.yml#/endpoints/executed_message_resource'
  /control/node:
    $ref: './control.yml#/endpoints/node_resource'
  /control/pieces:
    $ref: './control.yml#/endpoints/pieces_collection'
  /control/pieces/{pieceId}:
    $ref: './control.yml#/endpoints/piece_resource'
  /actors/channels/{channelId}/redeem:
    $ref: 'channels.yml#/endpoints/channel_resource_redeem'
  /actors/channels/{channelId}/vouchers:
    $ref: 'channels.yml#/endpoints/channel_resource_vouchers'
  /channels:
    $ref: 'channels.yml#/endpoints/channels_collection'
  /channels/{channelId}: # Right now it's not possible to look up Channels by ID alone, only by Payee/ID, channel ID could just be a concatenation
    $ref: 'channels.yml#/endpoints/channel_resource'
  /channels/{channelId}/close:
    $ref: 'channels.yml#/endpoints/channel_resource_close'
  /channels/{channelId}/cancel:
    $ref: 'channels.yml#/endpoints/channel_resource_cancel'
  /channels/{channelId}/reclaim:
    $ref: 'channels.yml#/endpoints/channel_resource_reclaim'
  /market/asks:
    $ref: 'market.yml#/endpoints/asks_collection'
  /market/asks/{askId}:
    $ref: 'market.yml#/endpoints/ask_resource'
  /market/deals:
    $ref: 'market.yml#/endpoints/deals_collection'
